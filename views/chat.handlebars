<main class="container-fluid">
    <div class="container-fluid">
        <div class="nav-bar">
            <h1 class="h3 mb-3">Messages</h1>
            <img src="{{picture}}" alt="Avatar" class="avatar">
        </div>
        <div class="card">
            <div class="row g-0">
                <div class="col-12 col-lg-5 col-xl-3 border-right">
                    <div class="px-4 d-none d-md-block">
                        <div class="d-flex align-items-center">
                            <div class="flex-grow-1">
                                <input type="text" class="form-control my-3" placeholder="Search...">
                            </div>
                        </div>
                    </div>
                    {{#each accounts}}
                    <a href="#" class="list-group-item list-group-item-action border-0">
                        <div class="d-flex align-items-start " onclick="setSelectedAccount(this)">
                            <img id="img" src="{{_doc.picture}}" class="rounded-circle mr-1" alt="{{_doc.name}}"
                                width="40" height="40">
                            <div id="account-name" class="flex-grow-1 ml-3">
                                {{_doc.name}}
                            </div>
                        </div>
                    </a>
                    {{/each}}
                    <hr class="d-block d-lg-none mt-1 mb-0">
                </div>
                <div class="col-12 col-lg-7 col-xl-9">
                    <div class="py-2 px-4 border-bottom d-none d-lg-block">
                        <div class="d-flex align-items-center py-1">
                            <div class="position-relative">
                                <img id="selectedAccountImg" src="{{firstUserPicture}}" class="rounded-circle mr-1"
                                    alt="No Friends" width="40" height="40">
                            </div>
                            <div class="flex-grow-1 pl-3">
                                <strong id="selectedAccountName">{{firstUserName}}</strong>
                                <div class="text-muted small"></div>
                            </div>
                            <div>
                                <button class="btn btn-primary btn-lg mr-1 px-3"><svg xmlns="http://www.w3.org/2000/svg"
                                        width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                        stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                        class="feather feather-phone feather-lg">
                                        <path
                                            d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z">
                                        </path>
                                    </svg></button>
                                <button class="btn btn-info btn-lg mr-1 px-3 d-none d-md-inline-block"><svg
                                        xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                        fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                        stroke-linejoin="round" class="feather feather-video feather-lg">
                                        <polygon points="23 7 16 12 23 17 23 7"></polygon>
                                        <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                                    </svg></button>
                                <button class="btn btn-light border btn-lg px-3"><svg xmlns="http://www.w3.org/2000/svg"
                                        width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                        stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                        class="feather feather-more-horizontal feather-lg">
                                        <circle cx="12" cy="12" r="1"></circle>
                                        <circle cx="19" cy="12" r="1"></circle>
                                        <circle cx="5" cy="12" r="1"></circle>
                                    </svg></button>
                            </div>
                        </div>
                    </div>
                    <ul class="chat-messages-list p-4" id="chatMessages">
                    </ul>

                    <div class="flex-grow-0 py-3 px-4 border-top">
                        <form id="messageForm"> <!-- Added a form element with id 'messageForm' -->
                            <div class="input-group">
                                <input id="input" type="text" class="form-control" placeholder="Type your message">
                                <button type="submit" class="btn btn-primary">Send</button>
                                <!-- Added type="submit" -->
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>
<script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    let usernameAlreadySelected = false
    let selectedAccount = '{{firstUserName}}'
    let selectedAccountImage = '{{firstUserPicture}}'
    let accounts = null
    let senderDetails = {}
    var listItems = document.getElementsByClassName('list-group-item');
    const form = document.getElementById('messageForm')
    const input = document.getElementById('input')

    const getUserIdByUsername = () => {
        const filtredArray = accounts.filter(user => user.username === selectedAccount)
        if (filtredArray.length !== 0) return filtredArray[0].userID
        alert("offline user ):");
        input.value = ''
        return filtredArray
    }

    const getUsernameByID = (userID) => {
        const filtredArray = accounts.filter(user => user.userID === userID)
        return filtredArray[0].username
    }

    const getTime = () => {
        const now = new Date();
        const hours = now.getHours();
        const minutes = now.getMinutes();
        const paddedMinutes = String(minutes).padStart(2, '0');
        return `${hours}:${paddedMinutes}`;
    };

    const updateMessages = (message, userID, fromSelf) => {
        //retrieve the sender account
        const currentAccount = accounts.filter(user => user.userID === userID)
        currentAccount[0].messages.push({ ...message, fromSelf: fromSelf })
        const currentAccountIndex = accounts.findIndex(user => user.userID === userID)
        //update the sender account 
        accounts[currentAccountIndex] = currentAccount[0]
    }

    const showMessages = () => {
        accounts.forEach((user) => {
            user.messages.forEach((message) => {
                if (message.fromSelf && getUsernameByID(message.to) === selectedAccount) {
                    const chatMessages = document.getElementById('chatMessages');
                    const newMessageLi = document.createElement('li');
                    newMessageLi.className = 'chat-message-right pb-4';
                    newMessageLi.innerHTML = `
                        <div>
                            <img src='${picture}'
                                class="rounded-circle mr-1" alt="You" width="40" height="40">
                            <div class="text-muted small text-nowrap mt-2">${message.time}</div>
                        </div>
                        <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                            <div class="font-weight-bold mb-1">You</div>
                            ${message.content}
                        </div>
                        `;
                    chatMessages.appendChild(newMessageLi);
                    window.scrollTo(0, document.body.scrollHeight);
                } else if (getUsernameByID(message.from) === selectedAccount && message.to === socket.userID) {
                    const chatMessages = document.getElementById('chatMessages');
                    const newMessageLi = document.createElement('li');
                    newMessageLi.className = 'chat-message-left pb-4';
                    newMessageLi.innerHTML = `
                        <div>
                            <img src=${message.senderDetails.image}
                                class="rounded-circle mr-1" alt="Sharon Lessman" width="40" height="40">
                                <div class="text-muted small text-nowrap mt-2">${message.time}</div>
                        </div>
                        <div class="flex-shrink-1 bg-light rounded py-2 px-3 ml-3">
                            <div class="font-weight-bold mb-1">${message.senderDetails.name}</div>
                            ${message.content}
                        </div>
                
                        `;

                    chatMessages.appendChild(newMessageLi);
                    window.scrollTo(0, document.body.scrollHeight);
                }
            })
        });
    }

    const setSelectedAccount = (element) => {
        selectedAccount = element.querySelector('div').innerText.trim()
        selectedAccountImage = element.querySelector('img').getAttribute('src')
        console.log(`update the selection ${selectedAccount} and ${selectedAccountImage}`)
        //updating current chat friend details
        document.getElementById('selectedAccountName').innerText = selectedAccount
        document.getElementById('selectedAccountImg').src = selectedAccountImage

        //update the chat 
        const chatMessages = document.getElementById('chatMessages');
        while (chatMessages.firstChild) {
            chatMessages.removeChild(chatMessages.firstChild)
        }
        showMessages()
    }

    //init client
    const username = "{{ username }}";
    const picture = "{{picture}}"
    const socket = io({ autoConnect: false });
    const sessionID = localStorage.getItem("sessionID");
    if (sessionID) {
        console.log("socket auth based on the session")
        usernameAlreadySelected = true
        socket.auth = { sessionID };
        socket.connect();
    }
    if (!usernameAlreadySelected) {
        console.log("socket auth based on the username")
        usernameAlreadySelected = true
        socket.auth = { username }
        socket.connect()
    }
    socket.on("session", ({ sessionID, userID }) => {
        socket.auth = { sessionID };
        localStorage.setItem("sessionID", sessionID);
        socket.userID = userID;
    });

    socket.on("connect_error", (err) => {
        if (err.message === "invalid username") {
            // Assuming you have a way to handle this in your application
            console.log('connect_error: ', err)
        }
    });
    //recieve all online users
    socket.on("users", (users) => {
        users.forEach((user) => {
            user.messages.forEach((message) => {
                message.fromSelf = message.from === socket.userID
            })
            user.self = user.userID === socket.id;
        });
        console.log("<<<resieveing all online users >>>>: ", users)
        accounts = users
        showMessages()
    });

    //update list of account when a new user connects
    socket.on("user connected", (user) => {
        console.log("<<<<new user connected>>>>: ", user)
        for (let i = 0; i < accounts.length; i++) {
            const currentUser = accounts[i];
            if (currentUser.username === user.username) {
                currentUser.connected = true;
                return; // Exit the callback function
            }
        }
        accounts.push(user);
    });
    //sendig the message 
    form.addEventListener('submit', (event) => {
        event.preventDefault(); // Prevents the default form submission behavior
        if (input.value.trim()) {
            const content = input.value
            senderDetails.name = username
            senderDetails.image = picture
            const resiever = getUserIdByUsername()
            if (resiever.length === 0) return
            const message = {
                content: content,
                senderDetails: senderDetails,
                from: socket.userID,
                to: resiever,
                time: getTime()
            }
            socket.emit("private message", message);
            updateMessages(message, socket.userID, true)
            input.value = ''
            const chatMessages = document.getElementById('chatMessages');
            const newMessageLi = document.createElement('li');
            newMessageLi.className = 'chat-message-right pb-4';
            newMessageLi.innerHTML = `
                <div>
                    <img src='${picture}'
                        class="rounded-circle mr-1" alt="You" width="40" height="40">
                    <div class="text-muted small text-nowrap mt-2">${getTime()}</div>
                </div>
                <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                    <div class="font-weight-bold mb-1">You</div>
                    ${content}
                </div>
                
            `;
            chatMessages.appendChild(newMessageLi);
            window.scrollTo(0, document.body.scrollHeight);

        }
    });

    //recieve the private event
    socket.on("private message", (message) => {
        if (getUsernameByID(message.from) != selectedAccount) {
            updateMessages(message, socket.userID, false)
        } else {
            updateMessages(message, socket.userID, false)
            console.log(`i recieved ${message.content} from ${message.from}`)
            const chatMessages = document.getElementById('chatMessages');
            const newMessageLi = document.createElement('li');
            newMessageLi.className = 'chat-message-left pb-4';
            newMessageLi.innerHTML = `
                <div>
                    <img src=${message.senderDetails.image}
                         class="rounded-circle mr-1" alt="Sharon Lessman" width="40" height="40">
                        <div class="text-muted small text-nowrap mt-2">${getTime()}</div>
                </div>
                <div class="flex-shrink-1 bg-light rounded py-2 px-3 ml-3">
                    <div class="font-weight-bold mb-1">${message.senderDetails.name}</div>
                    ${message.content}
                </div>
                
            `;
            chatMessages.appendChild(newMessageLi);
            window.scrollTo(0, document.body.scrollHeight);
        }


    });
    socket.on("disconnect", () => {
        accounts.forEach((user) => {
            if (user.self) {
                user.connected = false;
            }
        });
    });
    socket.on("user disconnected", (id) => {
        for (let i = 0; i < accounts.length; i++) {
            const user = accounts[i];
            if (user.userID === id) {
                user.connected = false;
                break;
            }
        }
    });
    socket.on('server_about_to_disconnect', (data) => {
        console.log(data.message);
        localStorage.clear()
    });
    //remove events when the user reload or exist the page
    let isTabClosing = false;
    window.addEventListener('beforeunload', (event) => {
        isTabClosing = true;
        console.log('disconnecting......',)
        socket.off("disconnect");
        socket.off("users");
        socket.off("user connected");
        socket.off("user disconnected");
        socket.off("private message");
        socket.off("connect_error");
    });
    //send a private message 

</script>