<link href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/css/bootstrap.min.css" rel="stylesheet">
<style type="text/css">
    body {
        margin-top: 20px;
    }

    .chat-online {
        color: #34ce57
    }

    .chat-offline {
        color: #e4606d
    }

    .chat-messages {
        display: flex;
        flex-direction: column;
        max-height: 800px;
        overflow-y: scroll
    }

    .chat-message-left,
    .chat-message-right {
        display: flex;
        flex-shrink: 0
    }

    .chat-message-left {
        margin-right: auto
    }

    .chat-message-right {
        flex-direction: row-reverse;
        margin-left: auto
    }

    .py-3 {
        padding-top: 1rem !important;
        padding-bottom: 1rem !important;
    }

    .px-4 {
        padding-right: 1.5rem !important;
        padding-left: 1.5rem !important;
    }

    .flex-grow-0 {
        flex-grow: 0 !important;
    }

    .border-top {
        border-top: 1px solid #dee2e6 !important;
    }
</style>
</head>

<body>
    <main class="container-fluid">
        <div class="container-fluid">
            <h1 class="h3 mb-3">Messages</h1>
            <div class="card">
                <div class="row g-0">
                    <div class="col-12 col-lg-5 col-xl-3 border-right">
                        <div class="px-4 d-none d-md-block">
                            <div class="d-flex align-items-center">
                                <div class="flex-grow-1">
                                    <input type="text" class="form-control my-3" placeholder="Search...">
                                </div>
                            </div>
                        </div>
                        {{#each accounts}}
                        <a href="#" class="list-group-item list-group-item-action border-0">
                            <div class="d-flex align-items-start " onclick="setSelectedAccount(this)">
                                <img id="img" src="{{_doc.picture}}" class="rounded-circle mr-1" alt="{{_doc.name}}"
                                    width="40" height="40">
                                <div id="account-name" class="flex-grow-1 ml-3">
                                    {{_doc.name}}
                                </div>
                            </div>
                        </a>
                        {{/each}}
                        <hr class="d-block d-lg-none mt-1 mb-0">
                    </div>
                    <div class="col-12 col-lg-7 col-xl-9">
                        <div class="py-2 px-4 border-bottom d-none d-lg-block">
                            <div class="d-flex align-items-center py-1">
                                <div class="position-relative">
                                    <img id="selectedAccountImg" src="{{firstUserPicture}}" class="rounded-circle mr-1"
                                        alt="Sharon Lessman" width="40" height="40">
                                </div>
                                <div class="flex-grow-1 pl-3">
                                    <strong id="selectedAccountName">{{firstUserName}}</strong>
                                    <div class="text-muted small"></div>
                                </div>
                                <div>
                                    <button class="btn btn-primary btn-lg mr-1 px-3"><svg
                                            xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                            viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                            stroke-linecap="round" stroke-linejoin="round"
                                            class="feather feather-phone feather-lg">
                                            <path
                                                d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z">
                                            </path>
                                        </svg></button>
                                    <button class="btn btn-info btn-lg mr-1 px-3 d-none d-md-inline-block"><svg
                                            xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                            viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                            stroke-linecap="round" stroke-linejoin="round"
                                            class="feather feather-video feather-lg">
                                            <polygon points="23 7 16 12 23 17 23 7"></polygon>
                                            <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                                        </svg></button>
                                    <button class="btn btn-light border btn-lg px-3"><svg
                                            xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                            viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                            stroke-linecap="round" stroke-linejoin="round"
                                            class="feather feather-more-horizontal feather-lg">
                                            <circle cx="12" cy="12" r="1"></circle>
                                            <circle cx="19" cy="12" r="1"></circle>
                                            <circle cx="5" cy="12" r="1"></circle>
                                        </svg></button>
                                </div>
                            </div>
                        </div>
                        <ul class="chat-messages-list p-4" id="chatMessages">
                            <!-- Added parent ul with class 'chat-messages-list' -->
                            <li class="chat-message-right pb-4">
                                <!-- Changed div to li with class 'chat-message-right' -->
                                <div>
                                    <img src="https://bootdey.com/img/Content/avatar/avatar1.png"
                                        class="rounded-circle mr-1" alt="Chris Wood" width="40" height="40">
                                    <div class="text-muted small text-nowrap mt-2">2:33 am</div>
                                </div>
                                <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                                    <div class="font-weight-bold mb-1">You</div>
                                    Lorem ipsum dolor sit amet, vis erat denique in, dicunt prodesset te vix.
                                </div>
                            </li>
                            <li class="chat-message-left pb-4">
                                <!-- Changed div to li with class 'chat-message-left' -->
                                <div>
                                    <img src="https://bootdey.com/img/Content/avatar/avatar3.png"
                                        class="rounded-circle mr-1" alt="Sharon Lessman" width="40" height="40">
                                    <div class="text-muted small text-nowrap mt-2">2:34 am</div>
                                </div>
                                <div class="flex-shrink-1 bg-light rounded py-2 px-3 ml-3">
                                    <div class="font-weight-bold mb-1">Sharon Lessman</div>
                                    Sit meis deleniti eu, pri vidit meliore docendi ut, an eum erat animal commodo.
                                </div>
                            </li>
                        </ul>

                        <div class="flex-grow-0 py-3 px-4 border-top">
                            <form id="messageForm"> <!-- Added a form element with id 'messageForm' -->
                                <div class="input-group">
                                    <input id="input" type="text" class="form-control" placeholder="Type your message">
                                    <button type="submit" class="btn btn-primary">Send</button>
                                    <!-- Added type="submit" -->
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>

        let selectedAccount = '{{firstUserName}}'
        let selectedAccountImage = '{{firstUserPicture}}'
        let accounts = null
        let senderDetails = {}
        const form = document.getElementById('messageForm')
        const input = document.getElementById('input')
        const setSelectedAccount = (element) => {
            selectedAccount = element.querySelector('div').innerText.trim()
            selectedAccountImage = element.querySelector('img').getAttribute('src')
            //updating current chat friend details
            document.getElementById('selectedAccountName').innerText = selectedAccount
            document.getElementById('selectedAccountImg').src = selectedAccountImage
            console.log("setting the selected account: ", selectedAccount)
            console.log("setting the selected account img: ", selectedAccountImage)
        }

        const getUserIdByUsername = () => {
            console.log('all accounts in seconde user: ', accounts)
            const filtredArray = accounts.filter(user => user.username === selectedAccount && user.connected === true)
            console.log('fitred array in seconde user: ', filtredArray)
            return filtredArray[0].userID
        }
        const getTime = () => {
            const now = new Date()
            return `${now.getHours()}:${now.getMinutes()}`
        }

        //init client
        const socket = io({ autoConnect: false });
        const username = "{{ username }}";
        const picture = "{{picture}}"
        console.log("i recieved the name: ", username)

        //recieve all online users
        socket.on("users", (users) => {
            users.forEach((user) => {
                user.self = user.userID === socket.id;
            });
            accounts = users
            console.log('first connection, setting all accounts: ', accounts)
        });

        //update list of account when a new user connects
        socket.on("user connected", (user) => {
            for (let i = 0; i < accounts.length; i++) {
                const existingUser = accounts[i];
                if (existingUser.userID === user.userID) {
                    existingUser.connected = true;
                    return;
                }
            }
            accounts.push(user);
        });
        //sendig the message 
        form.addEventListener('submit', (event) => {
            event.preventDefault(); // Prevents the default form submission behavior
            if (input.value.trim()) {
                const message = input.value;
                console.log('Message submitted:', message);
                senderDetails.name = username 
                senderDetails.image = picture 
                socket.emit("private message", {
                    content: message,
                    senderDetails: senderDetails,
                    to: getUserIdByUsername(),
                });
                input.value = ''
                const chatMessages = document.getElementById('chatMessages');
                const newMessageLi = document.createElement('li');
                newMessageLi.className = 'chat-message-right pb-4';
                newMessageLi.innerHTML = `
                <div>
                    <img src='${picture}'
                        class="rounded-circle mr-1" alt="You" width="40" height="40">
                    <div class="text-muted small text-nowrap mt-2">${getTime()}</div>
                </div>
                <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                    <div class="font-weight-bold mb-1">You</div>
                    ${message}
                </div>
                
            `;
                console.log('setting sender details: ', senderDetails)
                chatMessages.appendChild(newMessageLi);
                window.scrollTo(0, document.body.scrollHeight);

            }
        });

        //recieve the private event
        socket.on("private message", ({ content, senderDetails,  from }) => {
            console.log(`i recieved ${content} from ${from}`)
            console.log("accounts in private message reciever: ", accounts)
            const chatMessages = document.getElementById('chatMessages');
            const newMessageLi = document.createElement('li');
            newMessageLi.className = 'chat-message-left pb-4';
            newMessageLi.innerHTML = `
                <div>
                    <img src=${senderDetails.image}
                         class="rounded-circle mr-1" alt="Sharon Lessman" width="40" height="40">
                        <div class="text-muted small text-nowrap mt-2">${getTime()}</div>
                </div>
                <div class="flex-shrink-1 bg-light rounded py-2 px-3 ml-3">
                    <div class="font-weight-bold mb-1">${senderDetails.name}</div>
                    ${content}
                </div>
                
            `;
        
            chatMessages.appendChild(newMessageLi);
            window.scrollTo(0, document.body.scrollHeight);

        });
        document.addEventListener('DOMContentLoaded', function () {
            const sessionID = localStorage.getItem("sessionID");

            if (sessionID) {
                socket.auth = { sessionID };
                socket.connect();
            }

            socket.auth = { username }
            socket.connect()

            socket.on("session", ({ sessionID, userID }) => {
                console.log('i recieved session')
                socket.auth = { sessionID };
                localStorage.setItem("sessionID", sessionID);
                socket.userID = userID;
            });

            socket.on("connect_error", (err) => {
                if (err.message === "invalid username") {
                    // Assuming you have a way to handle this in your application
                    console.log('connect_error: ', err)
                }
            });
        });
        socket.on("disconnect", () => {
            accounts.forEach((user) => {
                if (user.self) {
                    user.connected = false;
                }
            });
        });
        socket.on("user disconnected", (id) => {
            for (let i = 0; i < accounts.length; i++) {
                const user = accounts[i];
                if (user.userID === id) {
                    user.connected = false;
                    break;
                }
            }
        });
        //remove events when the user reload or exist the page
        window.addEventListener('beforeunload', (event) => {
            console.log('disconnecting......',)
            socket.off("disconnect");
            socket.off("users");
            socket.off("user connected");
            socket.off("user disconnected");
            socket.off("private message");
            socket.off("connect_error");
        });

        //send a private message 

    </script>